Javascript is synchronous(run line after line) and single threaded(one task at a time).
but there are possible ways to make JS as asynchronous
   i. Asynchronous JS can run paralleley or after certain time without blocking the actual code flow. seynchronous means code that runs sequentially
   ii. Asynchronous Javascript will perform certain changes to only specific parts of a web page
   iii. best example is request to the backend/server

Examples:
  a. Google Search: when you search for something, the search results s are loaded asynchronously,as you type , google sends request to its servers and retrive search results
  b. facebook, insta feed, when you scroll, it request server and responds it 
  c. live tracking position (GPS)
  d.  youtube streaming video
  e.  price update in ecommerce

  To understand asynchronous easily, first we will learn timers
  By default, browser provides two timer functions
  i. setTimeout
  ii. setInterval

i. setTimeout: it will take two parameter (a callback function and timer in milliseconds). it will execute the function automatically after the time is over but it executes only one time once the the time is over
  let c=0;
  setTimeout(function(){
    console.log(c);
    c++;
  },1000)

ii. setInterval: it also accepts two parameters (a callback function and timer in milliseconds). it will execute the function after every time the timer is over
let c=0;
setInterval(function(){
    console.log(c);
    c++;
},1000)


but we need to clear these timeout and intervals, so we can use,

clearTimeout : clearTimeout will accept timeout variable and stops it
clearInterval : clearInterval will accepts interval variable and stops it
we call asynchronous javascript in short form called "AJAX"


callback hell: once js is used to work with multiple callbacks nested for sequential operations . it is called callback hell or pyramid of doom. it is very difficult to understand so JS introduces a concept called "PROMISES"
Every Async function returns a PROMISE


Promise :  A Promise is an object which defines an eventual completion of asyncchronous operation
A Promise contains three states i.e., fulfilled/rejected/pending. By default Promises have Pending state
The one that receives the Promise resolves it using then and catch. if promise if fulfilled, it will go to then block or else it will go to catch block

Ususally backend will give Promises. we can even create  a peomise using " new Promise"

syntax :  let p = new Promise()

example: //creating a promise
let k = 10;
let p = new Promise((resolve, reject) =>
{
    setTimeout(() =>
    {
        if (k % 2 == 0) return resolve("take 1 lakh")
        else return reject("i will not give")
    },5000)
})
//use a promise
p
    .then((p) => console.log(p))
    .catch((err) => console.log(err))

Multiple Promises can be connected using then blocks , it is called Promise chaining. In promise chaining , the first then block returns value to the second then block and second  then blocks returns value to the next then block

API ( APplication Programming Interface ):
APplication Programming Interface is used to get the data from server. it acts like a bridge between frontend and backend.
Every API has an endpoint that contains data. if the data is in JSON(Javascript object notation) format, then that API is called REST API
In olden times, people use, xhr(xmlhttpRequest) for API's but now, every browser have a default method called "fetch" which is used for handling API request.

  fetch will return a promise

fetch(url)
.then((res)=>res.json())
.then((data)=>console.log(data))
.catch((err)=>console.log(err))

Promises contains chaining which is difficult to read , so JS provides modern
approach called "async - await".
await is a keyword which is used to resolve promise but await will work only in async functions
 const res = await fetch(url)
 const data = await res.json()
 console.log(data)

















